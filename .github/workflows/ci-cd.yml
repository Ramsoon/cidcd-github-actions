name: NIMC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME_PREFIX: successtech
  K8S_NAMESPACE: nimc-production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run backend tests
      run: |
        cd backend
        npm test
    
    - name: Run backend linting
      run: |
        cd backend
        npx eslint server.js || echo "ESLint not configured"

  build-and-push:
    name: Build and Push to Docker Hub
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-backend:day10
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-frontend:day10
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push HAProxy image
      uses: docker/build-push-action@v5
      with:
        context: ./haproxy
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-haproxy:day10
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-haproxy:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Display pushed images
      run: |
        echo "✅ Successfully pushed to Docker Hub:"
        echo "Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-backend:day10"
        echo "Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-frontend:day10"
        echo "HAProxy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-haproxy:day10"

  validate-k8s-manifests:
    name: Validate K8s Manifests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes manifests..."
        kubectl apply --dry-run=client -f k8s/namespace.yaml
        kubectl apply --dry-run=client -f k8s/configmap.yaml
        kubectl apply --dry-run=client -f k8s/secrets.yaml
        kubectl apply --dry-run=client -f k8s/postgres.yaml
        kubectl apply --dry-run=client -f k8s/backend.yaml
        kubectl apply --dry-run=client -f k8s/frontend.yaml
        kubectl apply --dry-run=client -f k8s/haproxy.yaml
        echo "✅ All Kubernetes manifests are valid!"

  update-manifests-for-dockerhub:
    name: Update Manifests for Docker Hub
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Update Kubernetes manifests with Docker Hub images
      run: |
        # Create updated backend deployment
        cat > k8s/backend-dockerhub.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend
          namespace: nimc-production
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: backend
          template:
            metadata:
              labels:
                app: backend
            spec:
              containers:
              - name: backend
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-backend:day10
                ports:
                - containerPort: 5000
                env:
                - name: APP_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: nimc-config
                      key: app-port
                - name: DB_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: nimc-config
                      key: db-host
                - name: DB_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: nimc-config
                      key: db-port
                - name: DB_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: nimc-config
                      key: db-name
                - name: DB_USER
                  valueFrom:
                    configMapKeyRef:
                      name: nimc-config
                      key: db-user
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: nimc-secrets
                      key: db-password
                - name: JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: nimc-secrets
                      key: jwt-secret
                - name: NODE_ENV
                  valueFrom:
                    configMapKeyRef:
                      name: nimc-config
                      key: node-env
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /api/health
                    port: 5000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /api/health
                    port: 5000
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-service
          namespace: nimc-production
        spec:
          selector:
            app: backend
          ports:
            - protocol: TCP
              port: 5000
              targetPort: 5000
        EOF
        
        # Create updated frontend deployment
        cat > k8s/frontend-dockerhub.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: frontend
          namespace: nimc-production
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: frontend
          template:
            metadata:
              labels:
                app: frontend
            spec:
              containers:
              - name: frontend
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-frontend:day10
                ports:
                - containerPort: 80
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
                livenessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 10
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend-service
          namespace: nimc-production
        spec:
          selector:
            app: frontend
          ports:
            - protocol: TCP
              port: 80
              targetPort: 80
        EOF
        
        # Create updated HAProxy deployment
        cat > k8s/haproxy-dockerhub.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: haproxy
          namespace: nimc-production
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: haproxy
          template:
            metadata:
              labels:
                app: haproxy
            spec:
              containers:
              - name: haproxy
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-haproxy:day10
                ports:
                - containerPort: 80
                - containerPort: 8404
                volumeMounts:
                - name: haproxy-config
                  mountPath: /usr/local/etc/haproxy/haproxy.cfg
                  subPath: haproxy.cfg
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
              volumes:
              - name: haproxy-config
                configMap:
                  name: haproxy-config
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: haproxy-service
          namespace: nimc-production
        spec:
          selector:
            app: haproxy
          ports:
            - name: http
              protocol: TCP
              port: 80
              targetPort: 80
              nodePort: 30009
            - name: stats
              protocol: TCP
              port: 8404
              targetPort: 8404
          type: NodePort
        EOF
        
        echo "✅ Created Docker Hub compatible manifests"
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-backend:day10"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-frontend:day10"
        echo "HAProxy image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/nimc-haproxy:day10"

    - name: Commit Docker Hub manifests
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/*-dockerhub.yaml
        git commit -m "ci: Add Docker Hub deployment manifests" || echo "No changes to commit"
        git push

  local-deployment-guide:
    name: Local Deployment Guide
    needs: [build-and-push, update-manifests-for-dockerhub]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate deployment instructions
      run: |
        echo "🚀 DEPLOYMENT INSTRUCTIONS FOR LOCAL MINIKUBE"
        echo "=============================================="
        echo ""
        echo "1. Build and push to Docker Hub manually (if needed):"
        echo "   ./scripts/push-to-dockerhub.sh"
        echo ""
        echo "2. Deploy using Docker Hub images:"
        echo "   kubectl apply -f k8s/namespace.yaml"
        echo "   kubectl apply -f k8s/secrets.yaml"
        echo "   kubectl apply -f k8s/configmap.yaml"
        echo "   kubectl apply -f k8s/postgres.yaml"
        echo "   kubectl apply -f k8s/backend-dockerhub.yaml"
        echo "   kubectl apply -f k8s/frontend-dockerhub.yaml"
        echo "   kubectl apply -f k8s/haproxy-dockerhub.yaml"
        echo ""
        echo "3. Or use the complete deployment script:"
        echo "   ./scripts/deploy-from-dockerhub.sh"
        echo ""
        echo "4. Access your application:"
        echo "   minikube service haproxy-service -n nimc-production --url"
        echo ""
        echo "📦 Your Docker Hub images:"
        echo "   https://hub.docker.com/r/successtech/nimc-backend"
        echo "   https://hub.docker.com/r/successtech/nimc-frontend"
        echo "   https://hub.docker.com/r/successtech/nimc-haproxy"
